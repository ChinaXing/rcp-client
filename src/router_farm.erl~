%%%-------------------------------------------------------------------
%%% @author LambdaCat
%%% @copyright (C) 2015, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 05. 三月 2015 下午4:26
%%%-------------------------------------------------------------------
-module(router_farm).
-author("LambdaCat").

%% API
-export([start/5]).

start(ClientNum, StartInterval, StartBatchSize, HeartbeatInterval, WaitResponseTimeout) ->
  PidList = start_loop(0, ClientNum, StartInterval, StartBatchSize, HeartbeatInterval, WaitResponseTimeout, []),
  io:format("All clients started : ~p~n", [PidList]),
  monitor_client().

monitor_client() ->
  receive
    {'DOWN', _, _, _, Info} ->
      io:format("Router exit message : ~p~n", [Info]),
      monitor_client()
  end.

start_loop(FromIndex, ClientNum, _ , _, _, _, PidStarted) when FromIndex >= ClientNum ->
	  lib_misc:list_reverse(lib_misc:list_flatten(PidStarted));
start_loop(FromIndex, ClientNum, StartInterval, StartBatchSize, HeartbeatInterval, WaitResponseTimeout, PidStarted) ->    
    io:format("Start : ~p -> ~p~n", [FromIndex, FromIndex + StartBatchSize]),
    PidOfBatch = start_routers(FromIndex, min(FromIndex + StartBatchSize, ClientNum), HeartbeatInterval, WaitResponseTimeout, []),
    lib_misc:sleep(StartInterval),
    start_loop(FromIndex + StartBatchSize, ClientNum, StartInterval, StartBatchSize, HeartbeatInterval, WaitResponseTimeout, [PidOfBatch | PidStarted]).

start_routers(FromIndex, FromIndex, _, _, PidStarted) -> PidStarted;
start_routers(FromIndex, ToIndex, HeartbeatInterval, WaitResponseTimeout, PidStarted) ->
  {Pid, _} = spawn_monitor(router, start, [FromIndex, HeartbeatInterval, WaitResponseTimeout]),
  start_routers(FromIndex + 1, ToIndex, HeartbeatInterval, WaitResponseTimeout, [Pid | PidStarted]).

