-module(packet_farm).
-export([build_package/3, parse_package/2]).
-define(ROUTER_SHAKE_COMMAND_REQUEST,100).
-define(ROUTER_SHAKE_COMMAND_RESPONSE,101).
-define(ROUTER_HEART_BEAT_COMMAND_REQUEST,107).
-define(ROUTER_HEART_BEAT_COMMAND_RESPONSE,108).

-record(phead, {
	  flag = 16#5aa5,
	  pack_len = 0,
	  device_type = 1,
	  version = 1,
	  command = 0,
	  encrypt_type = 1,
	  crc = 1,
	  pad = 1,
	  factory_id = 1001
}).

-record(authBody, {
	  timestamp,
	  routerSeq,
	  routerMac,
	  sign,
	  speed = 20,
	  routerVersion = "version 1.0",
	  rzServer = 1,
	  routerType = ""
}).

-record(heartbeatBody, { onlineUserNum = 0 }). 

build_package(auth, Index,[]) ->
    PB = #authBody{
	    timestamp = lib_misc:get_timestamp(),
	    routerSeq = string:left("r_" ++ integer_to_list(Index), 64, $0),
	    routerMac = lib_misc:get_mac(Index),
	    sign = string:left(lib_misc:get_sign(Index),32,$0)
	   },
    PBbits = list_to_binary([<<(PB#authBody.timestamp):32>>,
			     list_to_binary(PB#authBody.routerSeq),
			     PB#authBody.routerMac,
			     list_to_binary(PB#authBody.sign),
			     <<(PB#authBody.speed):16>>,
			     list_to_binary(PB#authBody.routerVersion),
			     <<(PB#authBody.rzServer)>>,
			     list_to_binary(PB#authBody.routerType)
	     ]),
    PkgLen = byte_size(PBbits) + 24,
    PH = build_header(PkgLen, ?ROUTER_SHAKE_COMMAND_REQUEST),
    list_to_binary([PH,PBbits]);

build_package(heartbeat, _ ,[OnlineNum]) ->
    PB = #heartbeatBody{ onlineUserNum = OnlineNum},
    PBbits = <<(PB#heartbeatBody.onlineUserNum):16>>,
    PkgLen = byte_size(PBbits) + 24,
    PH = build_header(PkgLen, ?ROUTER_HEART_BEAT_COMMAND_REQUEST),
    list_to_binary([PH,PBbits]).

build_header(PkgLen, Command) ->
    P = #phead{pack_len = PkgLen, command = Command},
    <<(P#phead.flag):16,
      (P#phead.pack_len):16,
      (P#phead.device_type):16,
      (P#phead.version):16,
      (P#phead.command):16,
      (P#phead.encrypt_type):16,
      (P#phead.crc):32,
      (P#phead.pad):32,
      (P#phead.factory_id):32>>.

parse_package(auth, Bin) ->
    <<Success,Code:16>> = Bin,
    {ok, {Success, Code}};
parse_package(heartbeat, _ ) ->
    ok.
    
